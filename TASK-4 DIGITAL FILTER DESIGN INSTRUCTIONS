module fir_filter #(
    parameter N = 4, // Number of taps
    parameter WIDTH = 16
) (
    input clk,
    input rst,
    input signed [WIDTH-1:0] x_in,
    output reg signed [WIDTH-1:0] y_out
);
    // Example coefficients (change as needed)
    parameter signed [WIDTH-1:0] h [0:N-1] = {16'sd2, 16'sd3, 16'sd3, 16'sd2};

    reg signed [WIDTH-1:0] shift_reg [0:N-1];
    integer i;

    always @(posedge clk) begin
        if (rst) begin
            for(i=0; i<N; i=i+1) begin
                shift_reg[i] <= 0;
            end
            y_out <= 0;
        end else begin
            // Shift the registers
            for(i=N-1; i>0; i=i-1) begin
                shift_reg[i] <= shift_reg[i-1];
            end
            shift_reg[0] <= x_in;

            // FIR calculation
            y_out <= 0;
            for(i=0; i<N; i=i+1) begin
                y_out <= y_out + shift_reg[i]*h[i];
            end
        end
    end
endmodule
`timescale 1ns/1ps

module tb_fir_filter;
    reg clk, rst;
    reg signed [15:0] x_in;
    wire signed [15:0] y_out;

    fir_filter uut (
        .clk(clk),
        .rst(rst),
        .x_in(x_in),
        .y_out(y_out)
    );

    initial begin
        clk = 0;
        forever #5 clk = ~clk;
    end

    initial begin
        rst = 1; x_in = 0;
        #10;
        rst = 0;
        // Apply some test inputs
        x_in = 16'd1; #10;
        x_in = 16'd2; #10;
        x_in = 16'd3; #10;
        x_in = 16'd4; #10;
        x_in = 16'd0; #50;
        $stop;
    end

    initial begin
        $monitor("Time=%0t, x_in=%d, y_out=%d", $time, x_in, y_out);
    end
endmodule
